---
- name: Prepare all nodes for Kubernetes installation
  hosts: k8s_cluster
  become: yes
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    - name: Check system requirements
      fail:
        msg: "System does not meet minimum requirements. Need at least {{ min_memory_gb }}GB RAM, {{ min_cpu_cores }} CPU cores, and {{ min_disk_gb }}GB disk space."
      when: 
        - ansible_memtotal_mb < (min_memory_gb * 1024)
        - ansible_processor_vcpus < min_cpu_cores
        - ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='size_available') | first | int < (min_disk_gb * 1024 * 1024 * 1024)

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - python3-pip
          - python3-setuptools
          - python3-wheel
          - ufw
          - ntp
          - chrony
        state: present

    - name: Set timezone
      timezone:
        name: "{{ timezone }}"

    - name: Configure NTP servers
      lineinfile:
        path: /etc/chrony/chrony.conf
        line: "server {{ item }} iburst"
        state: present
      loop: "{{ ntp_servers }}"
      notify: restart chrony

    - name: Start and enable chrony
      systemd:
        name: chrony
        state: started
        enabled: yes

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      args:
        warn: false

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - br_netfilter
        - ip_vs
        - ip_vs_rr
        - ip_vs_wrr
        - ip_vs_sh
        - nf_conntrack

    - name: Make kernel modules persistent
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - br_netfilter
        - ip_vs
        - ip_vs_rr
        - ip_vs_wrr
        - ip_vs_sh
        - nf_conntrack

    - name: Configure kernel parameters
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }
        - { key: 'vm.swappiness', value: '0' }
        - { key: 'vm.overcommit_memory', value: '1' }
        - { key: 'vm.panic_on_oom', value: '0' }
        - { key: 'fs.inotify.max_user_instances', value: '8192' }
        - { key: 'fs.inotify.max_user_watches', value: '1048576' }
        - { key: 'fs.file-max', value: '52706963' }
        - { key: 'fs.nr_open', value: '52706963' }
        - { key: 'net.netfilter.nf_conntrack_max', value: '2310720' }

    - name: Configure firewall rules
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.protocol }}"
        comment: "{{ item.description }}"
      loop: "{{ firewall_rules }}"

    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny

    - name: Create required directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ containerd_config_dir }}"
        - /var/lib/kubelet
        - /etc/kubernetes

  handlers:
    - name: restart chrony
      systemd:
        name: chrony
        state: restarted
